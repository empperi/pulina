(set-env!
  :source-paths   #{"src/clj" "src/cljc" "src/cljs"}
  :test-paths     #{"test/clj" "test/cljc" "test/cljs"}
  :resource-paths #{"resources"}
  :dependencies '[[org.clojure/clojure "1.8.0"]
                  [org.clojure/clojurescript "1.7.228" :scope "test"]
                  [org.clojure/core.async "0.2.374"]
                  [collin/puu "0.2.0-SNAPSHOT"]
                  [mount "0.1.10"]
                  [http-kit "2.1.18"]
                  [compojure "1.5.0"]
                  [hiccup "1.0.5"]
                  [garden "1.3.2"]
                  [re-frame "0.7.0"]
                  [adzerk/boot-test "1.1.0" :scope "test"]
                  [adzerk/boot-cljs "1.7.228-1" :scope "test"]
                  [adzerk/boot-reload "0.4.7" :scope "test"]
                  [com.cemerick/piggieback "0.2.1" :scope "test"]
                  [weasel "0.7.0" :scope "test"]
                  [adzerk/boot-cljs-repl "0.3.0" :scope "test"]
                  [org.clojure/tools.nrepl "0.2.12" :scope "test"]
                  [crisptrutski/boot-cljs-test "0.2.2-SNAPSHOT" :scope "test"]
                  [instaparse "1.4.1" :scope "test"]])

(System/setProperty "BOOT_EMIT_TARGET" "no")

(require
  '[boot.task.built-in :as built-in]
  '[boot.core :as core]
  '[adzerk.boot-test :as t]
  '[instaparse.core :as insta]
  '[clojure.edn :as edn]
  '[crisptrutski.boot-cljs-test :refer [test-cljs prep-cljs-tests run-cljs-tests]]
  '[adzerk.boot-cljs :refer [cljs]]
  '[adzerk.boot-cljs-repl :refer [cljs-repl start-repl repl-env]]
  '[adzerk.boot-reload :refer [reload]])

(def project-info-path "./resources/project-info.edn")
(defn project [] (edn/read-string (slurp project-info-path)))

(defn- project-version->str [v]
  (format "%s.%s.%s%s"
          (:major v)
          (:minor v)
          (:hotfix v)
          (if (:snapshot v) "-SNAPSHOT" "")))

(task-options!
  aot {:namespace #{'pulina.core}}
  cljs {:source-map true}
  test-cljs {:js-env :phantom}
  jar {:main 'pulina.core})

(defn- generate-lein-project-file! [& {:keys [keep-project] :or {:keep-project true}}]
  (let [pfile (clojure.java.io/file "project.clj")
        proj (project)]
    (if-not keep-project (.deleteOnExit pfile))
    (spit pfile (str "; Auto-generated by Boot, regenerate by executing: 'boot lein-generate'\n"
                  (pp-str
                    (list* 'defproject (:project proj) (project-version->str (:version proj))
                           [:dependencies (get-env :dependencies)
                            :source-paths (vec (get-env :source-paths))
                            :test-paths   (vec (get-env :test-paths))]))))))

(defn- jar-name []
  (let [{v :version} (project)]
    (format "pulina-%s.%s.%s%s.jar"
            (:major v)
            (:minor v)
            (:hotfix v)
            (if (:snapshot v) "-SNAPSHOT" ""))))

(deftask lein-generate
  "Generate a leiningen `project.clj` file for mainly to be used with Cursive."
  []
  (fn [next-handler]
    (fn [fileset]
      (generate-lein-project-file! :keep-project true)
      (next-handler fileset))))

(deftask pulina-pom
  []
  (fn [next-handler]
    (fn [fileset]
      (((apply pom (flatten (seq (update (project) :version project-version->str)))) next-handler) fileset))))

(deftask cljs-test
  []
  (set-env! :source-paths (apply conj (get-env :source-paths) (get-env :test-paths)))
  (test-cljs :namespaces #{"pulina.core"}))

(deftask test
  "Wraps adzerk.boot-test/test since it provides no way to set test-paths separately from source-paths
   except by setting it manually just before executing the tests."
  []
  (comp
    (t/test (set-env! :source-paths (apply conj (get-env :source-paths) (get-env :test-paths))))
    (cljs-test)))

(deftask package
  "Builds an application artifact for the current version (no promotions)."
  []
  (comp
    (pulina-pom)
    (aot)
    (cljs :ids #{"js/main"} :optimizations :advanced)
    (uber)
    (jar :file (jar-name))
    (target)))

(deftask dev
  "Starts cljs watcher and live reload and REPLs for Clojure and ClojureScript code"
  []
  (comp
    (repl)
    (watch)
    (reload :on-jsload 'pulina.core/render!)
    #_(cljs-repl :ids #{"js/main"})
    (cljs :optimizations :none)
    (target)))